.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "XML::OPML::SimpleGen 3"
.TH XML::OPML::SimpleGen 3 "2013-05-14" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
XML::OPML::SimpleGen \- create OPML using XML::Simple
.SH "VERSION"
.IX Header "VERSION"
version 0.06_01
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    require XML::OPML::SimpleGen;
\&
\&    my $opml = new XML::OPML::SimpleGen();
\&
\&    $opml\->head(
\&             title => \*(AqFIFFS Subscriptions\*(Aq,
\&           );
\&
\&    $opml\->insert_outline(
\&        group => \*(Aqnews\*(Aq,  # groups will be auto generated
\&        text =>  \*(Aqsome feed\*(Aq,
\&        xmlUrl => \*(Aqhttp://www.somepage.org/feed.xml\*(Aq,
\&    );
\&
\&    # insert_outline and add_outline are the same
\&
\&    $opml\->add_group( text => \*(AqmyGroup\*(Aq ); # explicitly create groups
\&   
\&    print $opml\->to_string;
\&
\&    $opml\->save(\*(Aqsomefile.opml\*(Aq);
\&
\&    $opml\->xml_options( $hashref ); # XML::Simple compatible options
\&
\&    # See XML::OPML\*(Aqs synopsis for more knowledge
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
XML::OPML::SimpleGen lets you simply generate \s-1OPML\s0 documents
without having too much to worry about. 
It is a drop-in replacement for \s-1XML::OPML\s0
in regards of generation. 
As this module uses XML::Simple it is rather
generous in regards of attribute or element names.
.SH "NAME"
XML::OPML::SimpleGen \- create OPML using XML::Simple
.SH "COMMON METHODS"
.IX Header "COMMON METHODS"
.IP "new( key => value )" 4
.IX Item "new( key => value )"
Creates a new XML::OPML::SimpleGen instance. All key values will be
used as attributes for the <atom> element. The only thing you might
want to use here is the version => '1.1', which is default anyway.
.IP "head( key => value )" 4
.IX Item "head( key => value )"
\&\s-1XML::OPML\s0 compatible head method to change header values.
.IP "id ( )" 4
.IX Item "id ( )"
Returns (and increments) a counter.
.IP "add_group ( text => 'name' )" 4
.IX Item "add_group ( text => 'name' )"
Method to explicitly create a group which can hold multiple outline
elements.
.IP "insert_outline ( key => value )" 4
.IX Item "insert_outline ( key => value )"
\&\s-1XML::OPML\s0 compatible method to add an outline element. See
\&\s-1XML::OPML\s0 for details. The group key is used to put elements in a
certain group. Non existent groups will be created automagically.
.IP "add_outline ( key => value )" 4
.IX Item "add_outline ( key => value )"
Alias to insert_outline for \s-1XML::OPML\s0 compatibility.
.IP "as_string" 4
.IX Item "as_string"
Returns the given \s-1OPML\s0 \s-1XML\s0 data as a string
.ie n .IP "save ( $filename )" 4
.el .IP "save ( \f(CW$filename\fR )" 4
.IX Item "save ( $filename )"
Saves the \s-1OPML\s0 data to a file
.SH "ADVANCED METHODS"
.IX Header "ADVANCED METHODS"
.ie n .IP "xml_options ( $hashref )" 4
.el .IP "xml_options ( \f(CW$hashref\fR )" 4
.IX Item "xml_options ( $hashref )"
\&\f(CW$hashref\fR may contain any XML::Simple options.
.ie n .IP "outline ( $hashref )" 4
.el .IP "outline ( \f(CW$hashref\fR )" 4
.IX Item "outline ( $hashref )"
The outline method defines the 'template' for any new outline
element. You can preset key value pairs here to be used
in all outline elements that will be generated by XML::OPML::SimpleGen.
.ie n .IP "group ( $hashref )" 4
.el .IP "group ( \f(CW$hashref\fR )" 4
.IX Item "group ( $hashref )"
This method is similar to outline, it defines the template for a
grouping outline element.
.SH "MAINTAINER"
.IX Header "MAINTAINER"
Stephen Cardie \f(CW\*(C`<stephenca@cpan.org>\*(C'\fR
.SH "REPOSITORY"
.IX Header "REPOSITORY"
https://github.com/stephenca/XML\-OPML\-SimpleGen <https://github.com/stephenca/XML-OPML-SimpleGen>
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
.ie n .IP "\s-1KAPPA\s0 ""<kappa@cpan.org>"" contributed a patch to close \s-1RT51000\s0 <https://rt.cpan.org/Public/Bug/Display.html?id=51000>" 4
.el .IP "\s-1KAPPA\s0 \f(CW<kappa@cpan.org>\fR contributed a patch to close \s-1RT51000\s0 <https://rt.cpan.org/Public/Bug/Display.html?id=51000>" 4
.IX Item "KAPPA <kappa@cpan.org> contributed a patch to close RT51000 <https://rt.cpan.org/Public/Bug/Display.html?id=51000>"
.PD 0
.IP "gregoa@debian.org contributed a patch to close \s-1RT77725\s0 <https://rt.cpan.org/Public/Bug/Display.html?id=77725>" 4
.IX Item "gregoa@debian.org contributed a patch to close RT77725 <https://rt.cpan.org/Public/Bug/Display.html?id=77725>"
.PD
.SH "REPO"
.IX Header "REPO"
.Vb 2
\&  The git repository for this module is at
\&L<https://github.com/stephenca/XML\-OPML\-SimpleGen>
.Ve
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests to
\&\f(CW\*(C`bug\-xml\-opml\-simlegen@rt.cpan.org\*(C'\fR, or through the web interface at
http://rt.cpan.org/NoAuth/ReportBug.html?Queue=XML\-OPML\-SimleGen <http://rt.cpan.org/NoAuth/ReportBug.html?Queue=XML-OPML-SimleGen>.
I will be notified, and then you'll automatically be notified of progress on
your bug as I make changes.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\s-1XML::OPML\s0 XML::Simple
.SH "AUTHOR"
.IX Header "AUTHOR"
Marcus Theisen <marcus@thiesen.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2013 by Marcus Thiesen.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
